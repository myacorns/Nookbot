/* eslint-disable max-len */
const config = {
  token: 'ODYwMjY0Nzg4Nzg5NDI4MjM0.YN4uBA.VxhD2T4SD82k6D79ChESVXmx3lU',

  // Twitter
  twitterAPIKey: '',
  twitterAPISecret: '',
  twitterAccessToken: '',
  twitterAccessTokenSecret: '',
  followedTwitterUsers: [],

  // YouTube
  youtubeAPIKey: '',

  // Webhooks
  twitterHookID: '',
  twitterHookToken: '',

  // Raid Settings
  raidJoinsPerSecond: 10,
  raidJoinCount: 30,

  // Settings
  prefix: '.',
  verifiedRole: 'roleID',
  freezedRole: '860270899381665814',
  tradeRole: 'roleID',
  voiceRole: 'roleID',
  copperBookerRole: 'roleID',
  reddRole: 'roleID',
  headReddRole: 'roleID',
  modRole: '860270185504309258',
  headModRole: '860270688010108939',
  adminRole: '860270017500282900',
  staffChat: '860270592224788490',
  actionLog: 'channelID',
  joinLeaveLog: 'channelID',
  modLog: '860270438948798524',
  musicText: '860270511028568064',
  music: '808940843028185093',
  sesReqText: 'channelID',
  sesCategory: 'categoryID',
  calendar: 'channelID',
  mainGuild: '808940843028185089',
  modMailGuild: '860269805582942208',
  modMailCopperBookerRole: 'roleID',
  modMailReddRole: 'roleID',
  modMailHeadReddRole: 'roleID',
  modMailModRole: 'roleID',
  modMailHeadModRole: 'roleID',
  modMailAdminRole: 'roleID',

  // Image-Only channels
  imageOnlyChannels: ['channelID'],

  imageAndTextOnlyChannels: ['channelID'],

  // Newline Limit and Char Settings
  newlineAndCharProtectedChannels: ['channelID'],
  newlineLimit: 10,
  charLimit: 1000,

  // Image and Link Settings
  imageAndLinkProtectedChannels: ['channelID'],
  imageLinkLimit: 3,

  // No-Mention channels
  noMentionChannels: ['channelID'],

  banAppealLink: 'LINK',

  // UserDB Settings
  userDBDefaults: {
    friendcode: '',
    island: {
      islandName: '',
      fruit: '',
      characterName: '',
      hemisphere: '',
      profileName: '',
      dreamAddress: '',
      creatorCode: '',
    },
    positiveRep: 0,
    negativeRep: 0,
    posRepList: [],
    negRepList: [],
    roles: [],
    nicknames: [],
    usernames: [],
    infractions: [],
    lastMessageTimestamp: 0,
  },

  // Bot Perms and Stuff
  ownerID: '267843760124067851',

  admins: ['userID'],

  ignoreMember: ['userID'],

  ignoreChannel: ['channelID'],

  support: ['userID'],

  // Guild Perms and Stuff
  permLevels: [
    {
      level: 0,
      name: 'User',
      check: () => true,
    },
    {
      level: 1,
      name: 'Verified',
      check: (client, message) => {
        if (message.guild) {
          const verifiedRoleObj = message.guild.roles.cache.get(config.verifiedRole);

          if (verifiedRoleObj && message.member.roles.cache.has(verifiedRoleObj.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 2,
      name: 'Copper & Booker',
      check: (client, message) => {
        if (message.guild) {
          const copperBookerObj = message.guild.roles.cache.get((message.guild.id === config.modMailGuild) ? config.modMailCopperBookerRole : config.copperBookerRole);

          if (copperBookerObj && message.member.roles.cache.has(copperBookerObj.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 3,
      name: 'Redd',
      check: (client, message) => {
        if (message.guild) {
          const reddObj = message.guild.roles.cache.get((message.guild.id === config.modMailGuild) ? config.modMailReddRole : config.reddRole);

          if (reddObj && message.member.roles.cache.has(reddObj.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 4,
      name: 'Head Redd',
      check: (client, message) => {
        if (message.guild) {
          const headReddObj = message.guild.roles.cache.get((message.guild.id === config.modMailGuild) ? config.modMailHeadReddRole : config.headReddRole);

          if (headReddObj && message.member.roles.cache.has(headReddObj.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 5,
      name: 'Mod',
      check: (client, message) => {
        if (message.guild) {
          const modRoleObj = message.guild.roles.cache.get((message.guild.id === config.modMailGuild) ? config.modMailModRole : config.modRole);

          if (modRoleObj && message.member.roles.cache.has(modRoleObj.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 6,
      name: 'Head Mod',
      check: (client, message) => {
        if (message.guild) {
          const headModRoleObj = message.guild.roles.cache.get((message.guild.id === config.modMailGuild) ? config.modMailHeadModRole : config.headModRole);

          if (headModRoleObj && message.member.roles.cache.has(headModRoleObj.id)) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 7,
      name: 'Admin',
      check: (client, message) => {
        if (message.guild) {
          const adminRoleObj = message.guild.roles.cache.get((message.guild.id === config.modMailGuild) ? config.modMailAdminRole : config.adminRole);

          if ((adminRoleObj && message.member.roles.cache.has(adminRoleObj.id)) || message.member.hasPermission('ADMINISTRATOR')) {
            return true;
          }
        }
        return false;
      },
    },
    {
      level: 8,
      name: 'Server Owner',
      check: (client, message) => {
        if (message.guild && message.author.id === message.guild.ownerID) {
          return true;
        }
        return false;
      },
    },
    {
      level: 9,
      name: 'Bot Admin',
      check: (client, message) => config.admins.includes(message.author.id),
    },
    {
      level: 10,
      name: 'Bot Owner',
      check: (client, message) => config.ownerID === message.author.id,
    },
  ],
};

module.exports = config;
